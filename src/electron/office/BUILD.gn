# Copyright (c) 2022 Macro.
# Use of this source code is governed by the MIT license that can be
# found in the LICENSE file.

import("//build/buildflag_header.gni")
import("//electron/buildflags/buildflags.gni")
import("//ppapi/buildflags/buildflags.gni")
import("//v8/gni/v8.gni")

buildflag_header("buildflags") {
  header = "buildflags.h"
  flags = [ "ENABLE_OFFICE=$enable_office" ]
}

assert(enable_office)

copy("copy_libreofficekit") {
  sources = [
    "//third_party/libreofficekit/instdir/LICENSE",
    "//third_party/libreofficekit/instdir/program",
    "//third_party/libreofficekit/instdir/presets",
    "//third_party/libreofficekit/instdir/share",
  ]

  if (is_mac) {
    sources = []
    if (target_cpu == "x64") {
      sources = [
        "//third_party/libreofficekit/instdir/x64/LICENSE",
        "//third_party/libreofficekit/instdir/x64/program",
        "//third_party/libreofficekit/instdir/x64/presets",
        "//third_party/libreofficekit/instdir/x64/share",
      ]
    } else if (target_cpu == "arm64" ) {
      sources = [
        "//third_party/libreofficekit/instdir/aarch64/LICENSE",
        "//third_party/libreofficekit/instdir/aarch64/program",
        "//third_party/libreofficekit/instdir/aarch64/presets",
        "//third_party/libreofficekit/instdir/aarch64/share",
      ]
    }
  }

  outputs = [ "$root_out_dir/libreofficekit/{{source_file_part}}" ]
}

config("libreoffice_lib_config") {
  include_dirs = [ "//third_party/libreofficekit/instdir/sdk/include", "//electron" ]
  defines = [ "LOK_USE_UNSTABLE_API", "SAL_NO_EXCEPT" ]

  # mostly ported from libreoffice-core/odk/settings/settings.mk
  if (is_win) {
    defines += [
      "CPPU_ENV=mscx",
      "WNT",
      "WIN32"
    ]
  } else { 
    defines += [
      "CPPU_ENV=gcc3",
      "UNX"
    ]

    if (is_mac) {
      defines += [ "MACOSX" ]
    }
    if (is_linux) {
      defines += [ "LINUX" ]
    }
  }
}

source_set("internal") {
  visibility = [ ":*" ]

  sources = [
    "document_client.cc",
    "document_client.h",
    "event_bus.cc",
    "event_bus.h",
    "lok_tilebuffer.cc",
    "lok_tilebuffer.h",
    "lok_callback.cc",
    "lok_callback.h",
    "office_client.cc",
    "office_client.h",
    "office_keys.cc",
    "office_keys.h",
  ]

  deps = [
    ":buildflags",
    "//base",
    "//components/plugins/renderer",
    "//components/strings",
    "//gin",
    "//third_party/blink/public:blink_headers",
    "//third_party/icu",
    "//ui/base",
    "//ui/base/cursor/mojom:cursor_type",
    "//ui/events:events_base",
    "//ui/events/blink",
    "//ui/gfx/codec",
    "//ui/gfx/range",
  ]

  # LibreOffice uses a lot of inline exceptions for the UNO runtime.
  # Since they are limited only to ::css::uno::RuntimeException and all
  # other exceptions are intended to be translated to a throw in v8, this
  # is probably fine until we find out otherwise
  configs -= [
    "//build/config/compiler:no_exceptions",
    "//build/config/compiler:no_rtti",
  ]

  configs += [
    ":libreoffice_lib_config",
    "//build/config/compiler:exceptions",
    "//build/config/compiler:rtti",
  ]

  public_deps = [
    "//skia",
    "//v8",
  ]

  libs = []
  ldflags = []

  if (is_win) {
    libs += []
  }

  if (is_mac) {
    libs += []
    ldflags += [ "-Wl,-rpath,\$ORIGIN/libreofficekit/program" ]
  }

  if (is_linux) {
    libs += []
    ldflags += [ "-Wl,-rpath,\$ORIGIN/libreofficekit/program" ]
  }
}

static_library("office_web_plugin") {
  assert(enable_plugins,
         "The LibreOffice viewer relies on plugin infrastructure")

  sources = [ "office_web_plugin.cc", "office_web_plugin.h" ]

  configs += [ ":libreoffice_lib_config" ]

  deps = [
    ":buildflags",
    ":copy_libreofficekit",
    ":internal",
    "//base",
    "//base:i18n",
    "//cc/paint",
    "//gin",
    "//pdf",  # for PaintManager, might want to vendor this?
    "//skia",
    "//third_party/blink/public:blink_headers",
    "//ui/base/cursor",
    "//ui/base/cursor/mojom:cursor_type",
    "//ui/events/blink",
    "//v8",
  ]
}
