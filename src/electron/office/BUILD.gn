# Copyright (c) 2022 Macro.
# Use of this source code is governed by the MIT license that can be
# found in the LICENSE file.

import("//build/buildflag_header.gni")
import("//build/config/c++/c++.gni")
import("//electron/buildflags/buildflags.gni")
import("//ppapi/buildflags/buildflags.gni")
import("//testing/test.gni")
import("//v8/gni/v8.gni")

buildflag_header("buildflags") {
  header = "buildflags.h"
  flags = [ "ENABLE_OFFICE=$enable_office" ]
}

assert(enable_office)

lok_root_dir = "//third_party/libreofficekit/instdir"
if (is_mac) {
  if (target_cpu == "x64") {
    lok_root_dir += "/x64" 
  } else if (target_cpu == "arm64" ) {
    lok_root_dir += "/aarch64" 
  }
}
lok_sdk_dir = "$lok_root_dir/sdk/v8"

copy("copy_libreofficekit") {
  sources = [
    "$lok_root_dir/LICENSE",
    "$lok_root_dir/program",
    "$lok_root_dir/presets",
    "$lok_root_dir/share",
  ]

  outputs = [ "$root_out_dir/libreofficekit/{{source_file_part}}" ]
}

config("electron_config") {
  include_dirs = ["//electron"]
}

source_set("unov8") {
  visibility = [ ":*" ]

  sources = [
    lok_sdk_dir + "/unov8.hxx",
    lok_sdk_dir + "/unov8.cxx",
  ]

  configs += [ lok_sdk_dir + ":libreoffice_lib_config" ]
  configs += [ ":electron_config" ]

  deps = [
    ":buildflags",
    "//base",
    "//gin",
  ]
}


test("office_unittests") {
  testonly = true
  sources = [
    "test/mocked_paint_image.cc",
    "test/mocked_scoped_clipboard_writer.cc",
    "test/office_test.cc",
    "test/office_test.h",
    "atomic_bitset_unittest.cc",
    "office_instance_unittest.cc",
    "office_client_unittest.cc",
    # "lok_tilebuffer_unittest.cc",
    # "paint_manager_unittest.cc",
    "lok_callback_unittest.cc",
    "test/run_all_unittests.cc",
  ]

  if (is_mac) {
    sources += [
      "test/run_all_unittests_mac.mm",
      "test/mocked_scoped_clipboard_writer_mac.mm",
    ]
  }

  configs += [ lok_sdk_dir + ":libreoffice_lib_config" ]
  configs += [ ":electron_config" ]

  public_deps = [
    ":copy_libreofficekit"
  ]

  deps = [
    ":office_lib",
    ":buildflags",
    "//base",
    "//base/test:test_support",
    "//url:url",
    "//testing/gmock",
    "//testing/gtest",
    "//gin:gin_test",
    "//mojo/public/cpp/base:base"
  ]
}

source_set("office_lib") {
  visibility = [ ":*" ]

  sources = [
    "atomic_bitset.cc",
    "atomic_bitset.h",
    "v8_callback.cc",
    "v8_callback.h",
    "renderer_transferable.cc",
    "renderer_transferable.h",
    "document_client.cc",
    "document_client.h",
    "document_holder.cc",
    "document_holder.h",
    "lok_tilebuffer.cc",
    "lok_tilebuffer.h",
    "lok_callback.cc",
    "lok_callback.h",
    "paint_manager.cc",
    "paint_manager.h",
    "office_instance.cc",
    "office_instance.h",
    "promise.cc",
    "promise.h",
    "office_client.cc",
    "office_client.h",
    "office_keys.cc",
    "office_keys.h",
  ]

  # configs -= [
  #   "//build/config/compiler:no_exceptions",
  #   "//build/config/compiler:no_rtti",
  # ]

  deps = [
    ":buildflags",
    ":unov8",
    "//base",
    "//gin",
    "//ui/gfx/geometry", # DocumentClient
    "//ui/gfx/codec",
  ]

  configs += [ ":electron_config" ]
  configs += [ lok_sdk_dir + ":libreoffice_lib_config" ]

  public_deps = [
    "//skia",
    "//v8",
  ]
}

static_library("office_web_plugin") {
  assert(enable_plugins,
         "The LibreOffice viewer relies on plugin infrastructure")

  sources = [ "office_web_plugin.cc", "office_web_plugin.h" ]

  configs += [ ":electron_config" ]
  configs += [ lok_sdk_dir + ":libreoffice_lib_config" ]

  lib_dirs = [ "$root_out_dir/libreofficekit/program" ]
  libs = []
  ldflags = []

  if (is_win) {
    libs += []
  }

  if (is_linux) {
    libs += []
    ldflags += [ "-Wl,-rpath,\$ORIGIN/libreofficekit/program" ]
  }

  public_deps = [
    ":copy_libreofficekit"
  ]

  deps = [
    ":buildflags",
    ":office_lib",
    "//base",
    "//third_party/icu",
    "//base:i18n",
    "//components/strings",
    "//components/plugins/renderer",
    "//cc/paint",
    "//gin",
    "//skia",
    "//third_party/blink/public:blink_headers",
    "//ui/base",
    "//ui/base/cursor",
    "//ui/base/cursor/mojom:cursor_type",
    "//ui/events:events_base",
    "//ui/events/blink",
    "//ui/gfx/range",
    "//v8",
  ]
}
