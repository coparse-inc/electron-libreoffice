{
  // Electron/Chroimium stuff
  "Electron Header": {
    "scope": "cpp",
    "prefix": "hdr",
    "body": [
      "// Copyright (c) ${CURRENT_YEAR} Macro.",
      "// Use of this source code is governed by the MIT license that can be",
      "// found in the LICENSE file.",
      "",
      "#ifndef ${TM_FILEPATH/(^.*\\/src\\/)|([^a-zA-Z0-9])|([a-zA-Z0-9])/${2:+_}${3:/upcase}/g}_",
      "#define ${TM_FILEPATH/(^.*\\/src\\/)|([^a-zA-Z0-9])|([a-zA-Z0-9])/${2:+_}${3:/upcase}/g}_",
      "",
      "namespace electron {",
      "",
      "class ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g} {",
      " public:",
      "  ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}();",
      "  ~${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}() override;",
      "",
      "$0",
      "\\};",
      "",
      "} // namespace electron",
      "#endif  // ${TM_FILEPATH/(^.*\\/src\\/)|([^a-zA-Z0-9])|([a-zA-Z0-9])/${2:+_}${3:/upcase}/g}_",
    ]
  },
  "Electron Class": {
    "scope": "cpp",
    "prefix": "cc",
    "body": [
      "// Copyright (c) ${CURRENT_YEAR} Macro.",
      "// Use of this source code is governed by the MIT license that can be",
      "// found in the LICENSE file.",
      "",
      "#include \"${TM_FILEPATH/(^.*\\/src\\/)|(\\.cc$)|([a-zA-Z0-9])/$3/g}.h\"",
      "",
      "namespace electron {",
      "",
      "namespace {",
      "",
      "} // namespace",
      "",
      "${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}::${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}() {}",
      "${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}::~${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}() = default;",
      "",
      "$0",
      "",
      "} // namespace electron",
    ]
  },
  "Electron Copyright": {
    "scope": "cpp",
    "prefix": "copyright",
    "body": [
      "// Copyright (c) ${CURRENT_YEAR} Macro.",
      "// Use of this source code is governed by the MIT license that can be",
      "// found in the LICENSE file.",
    ]
  },
  "Log": {
    "scope": "cpp",
    "prefix": "log",
    "body": "LOG(ERROR) << \"${1:message}\";",
    "description": "Chrome Log output to console"
  },
  "Stack trace": {
    "scope": "cpp",
    "prefix": "st",
    "body": "base::debug::StackTrace().Print();"
  },
  "Stack trace header": {
    "scope": "cpp",
    "prefix": "sth",
    "body": "#include \"base/debug/stack_trace.h\""
  },
  "Class method": {
    "scope": "cpp",
    "prefix": "mm",
    "body": "${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}::",
  },
  // Generic C++
  "#inc": {
    "scope": "cpp",
    "prefix": "#inc",
    "body": [
      "#include "
    ],
  },
  "using": {
    "scope": "cpp",
    "prefix": "using",
    "body": [
      "using namespace $0;\n"
    ],
  },
  "for": {
    "prefix": "for",
    "body": [
      "for (int ${1} = ${2:0}; ${1} < ${3:length}; ${1}++)",
      "{",
      "\t$0",
      "}\n"
    ],
    "description": "snippet for a for loop"
  },
  "foreach": {
    "prefix": "fore",
    "body": [
      "for (auto &$1 : $2)",
      "{",
      "\t$0",
      "}\n"
    ],
    "description": "snippet for a for-auto loop"
  },
  "do": {
    "prefix": "do",
    "body": [
      "do",
      "{",
      "\t$0",
      "} while($1);\n"
    ],
    "description": "snippet for a do...while loop"
  },
  "while": {
    "prefix": "while",
    "body": [
      "while ($1)",
      "{",
      "\t$0",
      "}\n"
    ],
    "description": "snippet for a while loop"
  },
  "if": {
    "prefix": "if",
    "body": [
      "if ($1)",
      "{",
      "\t$0",
      "}"
    ],
    "description": "snippet for an if statement"
  },
  "else": {
    "prefix": "else",
    "body": [
      "else",
      "{",
      "\t$0",
      "}\n"
    ],
    "description": "snippet for else"
  },
  "else if": {
    "prefix": "else if",
    "body": [
      "else if ($1)",
      "{",
      "\t$0",
      "}"
    ],
    "description": "snippet for else-if"
  },
  "enum": {
    "prefix": "enum",
    "body": [
      "enum $1",
      "{",
      "\t$0",
      "};\n"
    ],
    "description": "snippet for an enum declaration"
  },
  "class": {
    "prefix": "class",
    "body": [
      "class $0",
      "{",
      "",
      "};\n"
    ],
    "description": "snippet for a class declaration"
  },
  "class inherit": {
    "scope": "cpp",
    "prefix": "classi",
    "body": [
      "class $1 :public $0",
      "{",
      "",
      "};\n"
    ],
    "description": "snippet for a class-inherit declaration"
  },
  "namespace": {
    "scope": "cpp",
    "prefix": "namespace",
    "body": [
      "namespace $1",
      "{",
      "\t$0",
      "}  // $1\n"
    ]
  },
  "#ifdef": {
    "scope": "cpp",
    "prefix": "#ifdef",
    "body": [
      "#ifdef  ${1}",
      "$0",
      "#endif  //$1"
    ],
    "description": "snippet for #if"
  },
  "struct": {
    "scope": "cpp",
    "prefix": "struct",
    "body": [
      "struct $1",
      "{",
      "\t$0",
      "};\n"
    ],
    "description": "snippet for a struct declaration"
  },
  "switch": {
    "scope": "cpp",
    "prefix": "switch",
    "body": [
      "switch ($1)",
      "{",
      "  case $2:",
      "\t$0",
      "\tbreak;",
      "\n",
      "\n",
      "  default:",
      "\tbreak;",
      "}"
    ],
    "description": "snippet for a switch statement"
  },
  "case": {
    "scope": "cpp",
    "prefix": "case",
    "body": [
      "  case $1:",
      "\t$0",
      "\tbreak;"
    ],
    "description": "snippet for case (...)"
  },
  "try": {
    "scope": "cpp",
    "prefix": "try",
    "body": [
      "try",
      "{",
      "\t$1",
      "}",
      "catch (const std::exception& $2)",
      "{",
      "\t$0",
      "}\n"
    ],
    "description": "snippet for a try-catch block"
  },
  "union": {
    "scope": "cpp",
    "prefix": "union",
    "body": [
      "union $1",
      "{",
      "\t$0",
      "};\n"
    ],
    "description": "snippet for a union declaration"
  },
  "#def": {
    "scope": "cpp",
    "prefix": "#def",
    "body": [
      "#define  $1  $2\n"
    ],
    "description": "snippet for #def"
  },
  "template": {
    "scope": "cpp",
    "prefix": "tem",
    "body": [
      "template <typename $0>"
    ],
    "description": "snippet for a template"
  }
}
