name: Build
on:
  workflow_call:
    inputs:
      runner_label:
        required: true
        type: string
      version:
        required: true
        type: string
      working_dir:
        required: false
        default: '/r/el'
        type: string
    secrets:
      EC2_RUNNER_AWS_ID:
        required: true
      EC2_RUNNER_AWS_SECRET:
        required: true
      instance_id:
        required: true

jobs:
  start_runner:
    name: Start EC2 Runner
    runs-on: ubuntu-latest
    steps:
      - name: Setup AWS
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.EC2_RUNNER_AWS_ID }}
          aws-secret-access-key: ${{ secrets.EC2_RUNNER_AWS_SECRET }}
          aws-region: us-east-1
      - name: Start
        run: aws ec2 start-instances --instance-ids ${{ secrets.instance_id }}
      - name: Wait
        run: aws ec2 wait instance-status-ok --instance-ids ${{ secrets.instance_id }}
  build:
    needs: [start_runner]
    continue-on-error: true # Required to stop the EC2 runner
    name: Build
    runs-on:
      - self-hosted
      - ${{ inputs.runner_label }}
    outputs:
      succeeded: ${{ steps.check.outputs.check }}
    defaults:
      run:
        shell: bash
    env:
      IS_RELEASE: true
      DEPOT_TOOLS_WIN_TOOLCHAIN: 0
      GOMA_START_COMPILER_PROXY: true
      GOMA_FALLBACK_ON_AUTH_FAILURE: true
    steps:
      - name: Windows - Speed up cache
        if: ${{ runner.os == 'Windows' }}
        shell: cmd
        run: |
          echo "Adding GNU tar to PATH"
          echo C:\Program Files\Git\usr\bin>>"%GITHUB_PATH%"
      - name: Windows - Create RAM disk
        if: ${{ runner.os == 'Windows' }}
        shell: cmd
        run: |
          imdisk.exe -a -o awe -s 128G -m R: -p "/fs:ntfs /q /y"
          cd /d R:
      - name: Linux - Create RAM disk
        if: ${{ runner.os == 'Linux' }}
        run: |
          sudo umount /r || true
          sudo rm -rf /r || true
          sudo mkdir /r
          sudo mount -t tmpfs -o size=128g tmpfs /r
      - name: Linux - Setup working dir
        if: ${{ runner.os == 'Linux' }}
        working-directory: /
        run: |
          UID_GID="$(id -u):$(id -g)"
          sudo mkdir ${{ inputs.working_dir }}
          sudo chown $UID_GID ${{ inputs.working_dir }}
      - name: Windows - Setup working dir
        working-directory: C:\
        if: ${{ runner.os == 'Windows' }}
        run: |
          mkdir ${{ inputs.working_dir }}
      - name: Turn off line ending conversion in git
        run: |
          cd ${{ inputs.working_dir }}
          git config --global core.autocrlf false
          git config --global core.eol lf
      - name: Fix git on Windows
        if: ${{ runner.os == 'Windows' }}
        run: |
          cd ${{ inputs.working_dir }}
          git config --global core.symlinks false
          git config --global core.longpaths true
      - name: Checkout
        run: |
          git -c protocol.version=2 clone --depth=1 https://${{ github.token }}@github.com/${{ github.repository }} '${{ inputs.working_dir }}'
          cd ${{ inputs.working_dir }}
          git config --local gc.auto 0
      - name: Generate deps hash
        id: deps_hash
        run: |
          cd ${{ inputs.working_dir }}/src/electron
          node script/generate-deps-hash.js
          echo "deps_hash=$(cat .depshash-platformless)" >> $GITHUB_OUTPUT
      - name: Retrieve cache (base)
        id: cache-src-base
        uses: actions/cache@v3
        with:
          path: |
            base.tzstd
            dawn-angle.tzstd
            thirdparty.tzstd
          key: src-${{ steps.deps_hash.outputs.deps_hash }}-base
      - name: Retrieve cache (linux)
        if: ${{ runner.os == 'Linux' }}
        id: cache-src-linux
        uses: actions/cache@v3
        with:
          path: |
            linux.tzstd
          key: src-${{ steps.deps_hash.outputs.deps_hash }}-linux
      - name: Retrieve cache (windows)
        if: ${{ runner.os == 'Windows' }}
        id: cache-src-windows
        uses: actions/cache@v3
        with:
          path: |
            windows.tzstd
          key: src-${{ steps.deps_hash.outputs.deps_hash }}-windows
      - name: Extract cache
        run: |
          cd "${{ inputs.working_dir }}"
          export MSYS=winsymlinks:nativestrict # https://github.com/git-for-windows/git/pull/156, use proper links to prevent errors
          # GITHUB_WORKSPACE _should_ be the unix path in bash on Windows, but it isn't set correctly
          if [ "${{ runner.os }}" = "Windows" ]; then
            export EL_WORKSPACE=$(cygpath -u '${{ github.workspace }}')
          else
            export EL_WORKSPACE='${{ github.workspace }}'
          fi
          tar --zstd -xf "$EL_WORKSPACE/base.tzstd"
          tar --zstd -xf "$EL_WORKSPACE/dawn-angle.tzstd"
          tar --zstd --overwrite -xf "$EL_WORKSPACE/thirdparty.tzstd"
          case "${{ runner.os }}" in
            Linux)
              tar --zstd --overwrite -xf "$EL_WORKSPACE/linux.tzstd"
              ;;
            Windows)
              tar --zstd --overwrite -xf "$EL_WORKSPACE/windows.tzstd"
              ;;
          esac
      - name: Linux - Install node.js v16
        if: ${{ runner.os == 'Linux' }}
        run: |
          curl -fsSL https://deb.nodesource.com/setup_16.x | sudo -E bash -
          sudo apt-get install -y nodejs
      - name: Linux - Install zip
        if: ${{ runner.os == 'Linux' }}
        run: |
          sudo apt-get install -y zip
      - name: Windows - Prepare for build
        if: ${{ runner.os == 'Windows' }}
        run: |
          # cleanup old goma.ipc if necessary
          rm 'C:\Users\RUNNER~1\AppData\Local\Temp\goma\goma.ipc' || true

          cd ${{ inputs.working_dir }}
          scripts/e setup
      - name: "Windows - Fix LOK (TODO: find out why this is broken)"
        if: ${{ runner.os == 'Windows' }}
        run: |
          export LC_ALL=en_US.utf8
          lok_version="$(cat ${{ inputs.working_dir }}/src/electron/DEPS | grep -oP "'libreofficekit_version': '\\K[^']+")"
          cd ${{ inputs.working_dir }}/src/third_party/libreofficekit
          rm -rf instdir
          rm -f libreofficekit-win.tar.xz
          curl -LO "https://github.com/coparse-inc/libreofficekit/releases/download/$lok_version/libreofficekit-win.tar.xz"
          tar -xJf libreofficekit-win.tar.xz
      - name: Windows - Fix Clang toolchain
        if: ${{ runner.os == 'Windows' }}
        run: |
          Set-Location R:\el
          $env:PATH = 'R:\el\src\third_party\depot_tools;' + $env:PATH
          & cmd /c call src\third_party\depot_tools\cipd_bin_setup.bat
          & cmd /c call src\third_party\depot_tools\bootstrap\win_tools.bat
          & cmd /c call src\third_party\depot_tools\vpython3.bat src\tools\clang\scripts\update.py
          & cmd /c call src\third_party\depot_tools\vpython3.bat src/third_party/depot_tools/download_from_google_storage.py --no_resume --no_auth --bucket chromium-browser-clang/rc -s src/build/toolchain/win/rc/win/rc.exe.sha1
        shell: powershell
      - name: Build
        id: build
        run: |
          cd ${{ inputs.working_dir }}
          scripts/e setup

          (cd -- src/electron && node script/yarn install --frozen-lockfile)
          # GitHub actions repeatedly kills GOMA, simply restart it and the build since GOMA_START_COMPILER_PROXY fails
          set +e
          set +o pipefail
          attempts=1
          finished=0
          function goma_watch() {
            while true
            do
              sleep 300
              scripts/goma.sh check_restart
            done
          }

          goma_watch &
          GOMA_WATCH_PID=$!
          export RUN_GN_ONCE=true
          while [ $attempts -le 3 -a $finished -eq 0 ]
          do
            echo "Attempt: $attempts"
            scripts/e build && finished=1
            ((attempts++))
          done
          kill -9 $GOMA_WATCH_PID || true
          scripts/goma.sh ensure_stop || true
          [ $finished -eq 1 ] && echo "Finished successfully"
      - name: Copy build artifacts
        run: |
          cd "$GITHUB_WORKSPACE"
          cp -rf ${{ inputs.working_dir }}/src/out/Default/* .
          if [ "${{ runner.os }}" = "Linux" ]; then
            cp -f ${{ inputs.working_dir }}/src/electron/{electron-api.json,electron.d.ts}{,.sha256sum} .
          fi
      - name: Linux - Store LOK TypeScript bindings as artifact
        if: ${{ runner.os == 'Linux' }}
        uses: actions/upload-artifact@v3
        with:
          name: lok-ts
          path: src/third_party/libreofficekit/instdir/sdk/typescript/
          retention-days: 1
          if-no-files-found: error
      - name: Create release
        uses: ncipollo/release-action@v1
        with:
          artifacts: ${{ steps.build.outputs.target_uploads }}
          allowUpdates: true
          artifactErrorsFailBuild: true
          name: v${{ inputs.version }}
          tag: v${{ inputs.version }}
          body: |
            This is an automated release built from the `main` branch.
            For changes, please review the commit log.
      - name: The job has succeeded
        if: ${{ success() }}
        id: check
        run: echo "check=true" >> $GITHUB_OUTPUT
  stop_runner:
    name: Stop EC2 Runner
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - name: Setup AWS-CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.EC2_RUNNER_AWS_ID }}
          aws-secret-access-key: ${{ secrets.EC2_RUNNER_AWS_SECRET }}
          aws-region: us-east-1
      - name: Stop Runner
        run: aws ec2 stop-instances --instance-ids ${{ secrets.instance_id }}
      - name: Wait for Runner to be stopped
        run: aws ec2 wait instance-stopped --instance-ids ${{ secrets.instance_id }}
      - name: Fail the workflow if test failed
        if: ${{ needs.build.outputs.succeeded != 'true' }}
        run: |
          false
