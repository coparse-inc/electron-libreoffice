#!/bin/bash

set -e

SCRIPT_DIR=$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" &> /dev/null && pwd)
BASE_PATH="$(dirname -- "$SCRIPT_DIR")"
DEPOT_TOOLS_PATH="$BASE_PATH/depot_tools"
BUILD_TOOLS_PATH="$BASE_PATH/build-tools"
export PATH="$DEPOT_TOOLS_PATH:$SCRIPT_DIR:$PATH"
export GIT_CACHE_PATH="$BASE_PATH/.git-cache"
export CHROMIUM_BUILDTOOLS_PATH="$BASE_PATH/src/buildtools"

test ! -d "$DEPOT_TOOLS_PATH" && fetch-depot-tools.sh
test ! -d "$BUILD_TOOLS_PATH" && fetch-electron-build-tools.sh

GN_CONFIG=//electron/build/args/testing.gn
GN_GOMA_FILE="$BUILD_TOOLS_PATH/third_party/goma.gn"

if "${IS_RELEASE:=false}" = "true"; then
  export GN_CONFIG=//electron/build/args/release.gn
  export STRIP_BINARIES=true
  export GENERATE_SYMBOLS=true
  export CHECK_DIST_MANIFEST=1
fi

# The GH runners are x64 only, so we will need to cross compile
if "${FOR_APPLE_SILICON:=false}" = "true"; then
  export TARGET_ARCH=arm64
  GN_EXTRA_ARGS='target_cpu = "arm64" use_prebuilt_v8_context_snapshot = true'
  export USE_PREBUILT_V8_CONTEXT_SNAPSHOT=1
  export npm_config_arch=arm64
  export GENERATE_CROSS_ARCH_SNAPSHOT=true
  sed -i 's/"custom_vars": {}/"custom_vars": {"checkout_arm": True, "checkout_arm64": True}/g' .gclient
fi

# probably doesn't need to be updated, really
export DEPOT_TOOLS_UPDATE=0

case "$1" in
  sync)
    cd "$BASE_PATH"
    test ! -d src/third_party/electron_node && git clone --depth=1 --single-branch --branch v16.15.0 https://github.com/nodejs/node.git src/third_party/electron_node
    ELECTRON_USE_THREE_WAY_MERGE_FOR_PATCHES=1 gclient sync --no-history -v -v ${@:2}
    ;;
  build)
    # Mostly pulled from src/electron/.circleci/config/base.yml -- MIT LICENSE Copyright (c) Electron contributors Copyright (c) 2013-2020 GitHub Inc.
    # Use goma
    export NUMBER_OF_NINJA_PROCESSES=200
    goma.sh start

    # Build electron
    cd "$BASE_PATH/src"
    gn gen out/Default --args="import(\"$GN_CONFIG\") import(\"$GN_GOMA_FILE\") $GN_EXTRA_ARGS $GN_BUILDFLAG_ARGS"
    NINJA_SUMMARIZE_BUILD=1 autoninja -C out/Default electron -j $NUMBER_OF_NINJA_PROCESSES
    cp out/Default/.ninja_log out/electron_ninja_log
    node electron/script/check-symlinks.js

    # Dist strip
    if [ "$STRIP_BINARIES" == "true" ] && [ "`uname`" == "Linux" ]; then
      TARGET_CPU="${TARGET_ARCH:-x64}"
      electron/script/copy-debug-symbols.py --target-cpu="$TARGET_CPU" --out-dir=out/Default/debug --compress
      electron/script/strip-binaries.py --target-cpu="$TARGET_CPU"
      electron/script/add-debug-link.py --target-cpu="$TARGET_CPU" --debug-dir=out/Default/debug
    fi

    # Make dist
    ninja -C out/Default electron:electron_dist_zip

    # mksnapshot
    if [ "$USE_PREBUILT_V8_CONTEXT_SNAPSHOT" == "1" ]; then
      ninja -C out/Default electron:electron_mksnapshot_zip -j $NUMBER_OF_NINJA_PROCESSES
      ninja -C out/Default tools/v8_context_snapshot -j $NUMBER_OF_NINJA_PROCESSES
      gn desc out/Default v8:run_mksnapshot_default args > out/Default/mksnapshot_args
      (cd out/Default; zip mksnapshot.zip mksnapshot_args clang_x64_v8_arm64/gen/v8/embedded.S)
      rm -rf out/Default/clang_x64_v8_arm64/gen
      rm -rf out/Default/clang_x64_v8_arm64/obj
      rm -rf out/Default/clang_x64_v8_arm64/thinlto-cache
      rm -rf out/Default/clang_x64/obj
      gn gen out/Default --args="import(\"$GN_CONFIG\") import(\"$GN_GOMA_FILE\") $GN_EXTRA_ARGS $GN_BUILDFLAG_ARGS"
    fi

    # cross compile snapshot for Apple Silicon
    if [ "$GENERATE_CROSS_ARCH_SNAPSHOT" == "true" ]; then
      if [ "$TARGET_ARCH" == "arm" ]; then
        export MKSNAPSHOT_PATH="clang_x86_v8_arm"
      elif [ "$TARGET_ARCH" == "arm64" ]; then
        export MKSNAPSHOT_PATH="clang_x64_v8_arm64"
      fi
      cp "out/Default/$MKSNAPSHOT_PATH/mksnapshot" out/Default        
      cp "out/Default/$MKSNAPSHOT_PATH/v8_context_snapshot_generator" out/Default
      if [ "`uname`" == "Linux" ]; then
        cp "out/Default/$MKSNAPSHOT_PATH/libffmpeg.so" out/Default
      elif [ "`uname`" == "Darwin" ]; then
        cp "out/Default/$MKSNAPSHOT_PATH/libffmpeg.dylib" out/Default
      fi
      python electron/script/verify-mksnapshot.py --source-root "$PWD" --build-dir out/Default --create-snapshot-only
      mkdir cross-arch-snapshots
      cp out/Default-mksnapshot-test/*.bin cross-arch-snapshots
    fi

    # Generate Node.js headers
    ninja -C out/Default third_party/electron_node:headers

    # hunspell
    ninja -C out/Default electron:hunspell_dictionaries_zip -j $NUMBER_OF_NINJA_PROCESSES

    # libcxx
    if [ "`uname`" == "Linux" ]; then
      ninja -C out/Default electron:libcxx_headers_zip -j $NUMBER_OF_NINJA_PROCESSES
      ninja -C out/Default electron:libcxxabi_headers_zip -j $NUMBER_OF_NINJA_PROCESSES
      ninja -C out/Default electron:libcxx_objects_zip -j $NUMBER_OF_NINJA_PROCESSES
    fi

    # Generator symbols
    if [ "$GENERATE_SYMBOLS" == "true" ]; then
      ninja -C out/Default electron:electron_symbols
    fi

    # Zip symbols
    export BUILD_PATH="$PWD/out/Default"
    ninja -C out/Default electron:licenses
    ninja -C out/Default electron:electron_version
    DELETE_DSYMS_AFTER_ZIP=1 electron/script/zip-symbols.py -b $BUILD_PATH

    # Build typescript defs
    (cd -- electron && node script/yarn create-typescript-definitions)

    goma.sh stop
    ;;
  d)
    "$2" ${@:3}
    ;;
esac
